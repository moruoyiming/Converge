package com.algorithm.demo.剑指Offer;

/**
 * 请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。
 * <p>
 * 如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。
 * <p>
 * [["a","b","c","e"], ["s","f","c","s"], ["a","d","e","e"]]
 * <p>
 * 但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。
 * <p>
 * 示例 1：
 * <p>
 * 输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
 * 输出：true
 * <p>
 * 2、规律
 * 1、在搜索过程中，如果当前元素与目标元素不匹配，则回退到之前的节点再搜索
 * 2、在搜索过程中，如果当前元素与目标元素相匹配，则按照上左下右的方向进行再次搜索匹配剩下的元素
 * 3、在搜索过程中，搜索当前元素的上左下右方向的元素时，会出现重复访问之前元素的情况，比如搜索匹配成功的第三个元素 c 的四个方向时，会重复访问一下 f。
 * <p>
 * 3、匹配
 * 本题提供了一个矩阵，矩阵是一个二维数组，需要我们在二维数组中进行搜索，为了能够覆盖所有的情况，必然要使用两个嵌套的循环。
 * <p>
 * 在搜索过程中，当遇到匹配成功的元素，搜索其下一元素的操作与当前的操作一致，即可以使用递归。
 * <p>
 * 递归参数：当前元素在矩阵 board 中的行列索引 i 和 j ，当前目标字符在word 中的索引 k 。
 * <p>
 * 终止条件：
 * <p>
 * 返回 false：
 * <p>
 * (1) 行或列索引越界
 * <p>
 * (2) 当前矩阵元素与目标字符不同
 * <p>
 * (3) 当前矩阵元素已访问过
 * <p>
 * 返回 true：k = len(word) - 1 ，即字符串 word 已全部匹配。
 * <p>
 * 递推工作：
 * <p>
 * 标记当前矩阵元素：将 board[ i ] [ j ] 修改为特殊字符 #  ，代表此元素已访问过，防止之后搜索时重复访问。
 * 搜索下一节点：朝当前元素的 上、左、下、右 四个方向开启下层递归。
 * 回退时还原当前矩阵元素：将 board[ i ] [ j ] 元素还原至初始值，即 word[k] 。
 * 返回值： 返回布尔量 res ，代表是否搜索到目标字符串。
 * <p>
 * 4、边界
 * 1、行越界
 * 2、列越界
 * 3、矩阵元素已访问过
 */
public class Q12_矩阵中的距离 {

    /**
     * 六、复杂度分析
     * 时间复杂为 O( 4k  M N )，其中 M,N 分别为矩阵行列长度， K 为字符串 word 的长度，每个字符都有 4 个方向。
     * 空间复杂度为 O(K) 。
     * 七、相关标签
     * 深度优先搜索
     * 递归
     * 数组
     * 回溯
     *
     * @param board
     * @param word
     * @return
     */
    public boolean exist(char[][] board, String word) {
        //先将字符串进行拆分， 一个一个元素进行匹配
        char[] words = word.toCharArray();
        //通过两层嵌套，覆盖所有的情况
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                //以该元素为起始点，递归检查是否符合要求
                if (dfs(board, words, i, j, 0)) return true;
            }
        }
        return false;
    }

    public boolean dfs(char[][] board, char[] word, int i, int j, int k) {
        //边界情况判断
        //行越界
        //列越界
        //矩阵元素已访问过
        if(i >= board.length || i < 0 || j >= board[0].length || j < 0 || board[i][j] != word[k]) return false;
        // 之前已经和目标字符串匹配成功了 length - 1 个字符，此时又匹配成功了最后一个元素，直接返回结果
        if(k == word.length - 1) return true;
        // 标记当前矩阵元素，将其修改为特殊字符 #  ，代表此元素已访问过，防止之后搜索时重复访问。
        board[i][j] = '#';

        // 搜索元素的四个方向 上 左 下 右，匹配下一个目标元素
        boolean res = dfs( board , word , i , j - 1 , k + 1 )
                || dfs( board , word , i - 1 , j , k + 1 )
                || dfs( board , word , i , j + 1 , k + 1 )
                || dfs( board , word , i + 1 , j , k + 1 );

        // 回退时还原当前矩阵元素
        board[i][j] = word[k];

        // 返回结果
        return res;
    }


}
