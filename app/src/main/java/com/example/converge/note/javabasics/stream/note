dex

加固方案的手段
1.反模拟器
  模拟器运行apk，可以用模拟器监控到apk的各种行为，所以在实际的加固apk运行中，一旦发现模拟器在运行该APK就停止核心代码运行。
2.代码虚拟化
  代码虚拟化，自建一个虚拟执行引擎，把原生的可执行代码转换成自定义的指令进行虚拟执行。
3.加密
  核心代码进行压缩加密。

AES对称加密

dex 对齐操作。对dex文件优化。


问题？

  1.dex文件可以随便拼凑么？
  2.壳dex怎么来的
  3.如何签名？
  4.如何运行新apk(如何脱壳)？

dex文件     热修复  差分包


双亲委托机制:
   某个类加载器在加载类时，首先将加载 任务委托给父类加载器，依次递归，如果父类 加载器可以完成类加载任务，就成功返回；
   只有父类加载器无法完成此加载任务或者没有父 类加载器时，才自己去加载。

优点：
   1、避免重复加载，当父加载器已经加载了该类的时候， 就没有必要子ClassLoader再加载一次。
   2、安全性考虑，防止核心API库被随意篡改。

对称加密 &非对称加密

对称加密: 加密和解密的秘钥使用的是同一个
例如：DES、3DES、Blowfish、IDEA、RC4、RC5、RC6 和 AES

非对称加密算法: 公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密， 只有用对应的私有密钥才能解密；
如果用私有密钥对数据进行加密，那么只有用 对应的公开密钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种 算法叫作非对称加密算法

公钥所有人都有，私钥只有服务器有。


完成apk加固，我们需要具备的知识体系有哪些？
知识点												面试体系
熟练掌握Java IO相关代码                                Java语言进阶
深入研究Android apk的启动流程						    精通Android FrameWork层
精通Multidex文件加载机制，精通类 加载机制			        精通Android FrameWork层  JVM， DVM ClassLoader
明确dex文件的基本构造，了解dex文 件相关源码 		        精通Android FrameWork层  dex
APK打包的基本流程需要理解							    Gradle 工具熟练
掌握C/C++语言及NDK开发								    精通C/C++ 及NDK开发
掌握Java 反射和动态代理								Java语言进阶基础