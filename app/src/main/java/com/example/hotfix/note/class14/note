Java 运行过程

HelloWorld.java -->javac编译 --> HelloWorld.class --> Java类加载器ClassLoad加载 -->
JVM 运行时数据区 --> 执行引擎 --> 解析执行 --> 操作系统接口

运行时数据区域
      线程私有  虚拟机栈、本地方法栈、程序计数器
      线程共享  方法区、堆

程序计数器：指向当前线程正在执行的字节码指令地址。不会发生OOM
虚拟机栈：存储当前线程运行方法所需的数据，指令、返回地址。子弹夹  先进后出
  栈帧：局部变量表
        操作数栈
        动态连接
        完成出口
  大小限制 -Xss
  局部变量表：存储局部变量，只能存储八大基础数据类型 + 引用
    操作数栈：存放方法执行、操作
    动态连接：Person p = new Man
             p.wc()
             Person p = new WoMan
             p.wc()
    完成出口:方法执行后的返回值
本地方法栈：本地方法栈保存的是native方法的信息
当一个JVM创建的线程调用native方法后，JVM不再为其在虚拟机栈中 创建栈帧，JVM只是简单地动态链接并直接调用native方法



方法区：类信息、常量、静态变量、即时编译期编译后的代码
Java堆： 对象实例、数组


直接内存
不是虚拟机运行时数据区的一部分，也不是java虚拟 机规范中定义的内存区域;
如果使用了NIO,这块区域会被频繁使用，在java堆内可 以用directByteBuffer对象直接引用并操作;
这块内存不受java堆大小限制，但受本机总内存的限制 ，可以通过MaxDirectMemorySize来设置(默认与堆内 存最大值一样)，
所以也会出现OOM异常;








